#!/usr/bin/env python2.7

import sys
import os.path

root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, root_path)

import datetime
import logging
import argparse
import os

import M2Crypto.X509

import sapi.config.ca
import sapi.config.log
import sapi.utility
import sapi.ssl.ca

_logger = logging.getLogger(__name__)

description = "Sign subordinate CSR."

parser = argparse.ArgumentParser(description=description)

parser.add_argument('-f', '--csr_filepath',
                    metavar='filepath',
                    help="The filepath of the CSR (defaults to STDIN)")

parser.add_argument('-o', '--out_filepath',
                    metavar='filepath',
                    help="The filepath of the new certificate (defaults to STDOUT)")

parser.add_argument('validity',
                    metavar='validity',
                    help="The validity duration (can suffix 's' (seconds), "\
                         "'d' (days), 'y' (years, the default))")

parser.add_argument('-c', '--ca_path',
                    default=sapi.config.ca.DEFAULT_PATH,
                    metavar='path',
                    help='The path to install the identity files to')

parser.add_argument('-p', '--passphrase',
                    metavar='passphrase',
                    help='The passphrase for the CA private-key (will be '\
                         'prompted if not given)')

args = parser.parse_args()

# Validate/distill arguments.

validity = sapi.utility.get_delta_from_validity_phrase(args.validity)

if args.passphrase is None:
    print("Please enter the passphrase:")
    passphrase = raw_input()
else:
    passphrase = args.passphrase

if args.csr_filepath is not None:
    with open(args.csr_filepath) as f:
        csr_pem = f.read()
else:
    csr_pem = sys.stdin.read()

# Build the identity artifacts.

_logger.debug("Signing request.")

ca = sapi.ssl.ca.CA(args.ca_path, passphrase)
cert_pem = ca.sign(csr_pem, validity)

if args.out_filepath is not None:
    with open(args.out_filepath, 'w') as f:
        f.write(cert_pem)
else:
    sys.stdout.write(cert_pem)
