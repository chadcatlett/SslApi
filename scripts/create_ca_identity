#!/usr/bin/env python2.7

import sys
import os.path

root_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.path.insert(0, root_path)

import datetime
import logging
import argparse
import os

import M2Crypto.X509

import sapi.config.ca
import sapi.config.log
import sapi.utility
import sapi.ssl.helper
import sapi.ssl.ca
import sapi.ssl.requests
import sapi.ssl.keys

_logger = logging.getLogger(__name__)

description = "Create CA keys and certificate."

parser = argparse.ArgumentParser(description=description)

parser.add_argument('-c', '--ca_path',
                    default=sapi.config.ca.DEFAULT_PATH,
                    metavar='path',
                    help='The path to install the identity files to')

parser.add_argument('-p', '--passphrase',
                    metavar='passphrase',
                    help='The passphrase for the new private-key (will be '\
                         'prompted if not given)')

parser.add_argument('-f', '--field',
                    action='append',
                    nargs=2,
                    metavar=('key','value'),
                    required=True,
                    help='A distinguished-name field (C, ST, L, O, OU, '\
                         'CN, emailAddress, etc..) and value')

parser.add_argument('-validity', '--validity',
                    default=str(sapi.config.ca.DEFAULT_VALIDITY_Y),
                    metavar='validity',
                    help="The validity duration (can suffix 's' (seconds), "\
                         "'d' (days), 'y' (years, the default))")

args = parser.parse_args()

# Validate/distill arguments.

validity = sapi.utility.get_delta_from_validity_phrase(args.validity)

if args.passphrase is None:
    print("Please enter the passphrase:")
    passphrase = raw_input()
    if passphrase.strip() == '':
        raise ValueError("Please enter a passphrase.")

    print("Please enter the passphrase (again):")
    passphrase2 = raw_input()
    if passphrase2 != passphrase:
        raise ValueError("Passphrases don't match.")
else:
    passphrase = args.passphrase

# Build the identity artifacts.

dn = dict(args.field)
name = sapi.utility.build_name_from_dict(**dn)

print("Generating CA identity.")

identity = sapi.ssl.helper.new_selfsigned_cert(
            name, 
            passphrase, 
            validity, 
            bits=sapi.config.ca.BITS, 
            is_ca=True)

(ca_private_key_pem, ca_public_key_pem, ca_cert_pem) = identity

# Write identity files.

if os.path.exists(args.ca_path) is True:
    raise EnvironmentError("CA path [%s] already exists. Please choose a "
                           "directory that can be created." % (args.ca_path))

os.makedirs(args.ca_path)

private_key_filepath = os.path.join(
                        args.ca_path, 
                        sapi.config.ca.FILENAME_PEM_PRIVATE_KEY)

print("Writing CA PEM private-key: %s" % (private_key_filepath))

with open(private_key_filepath, 'w') as f:
    f.write(ca_private_key_pem)

public_key_filepath = os.path.join(
                        args.ca_path, 
                        sapi.config.ca.FILENAME_PEM_PUBLIC_KEY)

print("Writing CA PEM public-key: %s" % (public_key_filepath))

with open(public_key_filepath, 'w') as f:
    f.write(ca_public_key_pem)

certificate_filepath = os.path.join(
                        args.ca_path, 
                        sapi.config.ca.FILENAME_PEM_CERTIFICATE)

print("Writing CA PEM certificate: %s" % (certificate_filepath))

with open(certificate_filepath, 'w') as f:
    f.write(ca_cert_pem)
